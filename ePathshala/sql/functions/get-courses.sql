CREATE OR REPLACE FUNCTION GET_COURSES(PARAM_ORDER VARCHAR[][])
RETURNS TABLE(COURSE_ID BIGINT, TITLE VARCHAR, DESCRIPTION TEXT, DATE_OF_CREATION DATE, PRICE INT, CREATOR_ID BIGINT, CREATOR_NAME VARCHAR, ENROLL_COUNT BIGINT)
LANGUAGE PLPGSQL
AS
$$
DECLARE
	ORDER_QUERY VARCHAR := '';
	QUERY_STRING VARCHAR := 'SELECT COURSES.COURSE_ID AS COURSE_ID, TITLE, TRIM(DESCRIPTION) AS DESCRIPTION, DATE_OF_CREATION, PRICE, CREATOR_ID, FULL_NAME AS CREATOR_NAME, COUNT(USERS.USER_ID) AS ENROLL_COUNT FROM COURSES JOIN ENROLLED_COURSES ON(COURSES.COURSE_ID = ENROLLED_COURSES.COURSE_ID) JOIN USERS ON(COURSES.CREATOR_ID = USERS.USER_ID) GROUP BY COURSES.COURSE_ID, TITLE, DESCRIPTION, DATE_OF_CREATION, PRICE, CREATOR_ID, CREATOR_NAME ';
BEGIN
	IF ARRAY_LENGTH(PARAM_ORDER, 1) > 0 THEN
		ORDER_QUERY := 'ORDER BY';
	END IF;
	FOR I IN 1..ARRAY_LENGTH(PARAM_ORDER, 1) LOOP
		IF I > 1 THEN
			ORDER_QUERY := CONCAT(ORDER_QUERY, ', ', PARAM_ORDER[I][1], ' ', PARAM_ORDER[I][2]);
		ELSE
			ORDER_QUERY := CONCAT(ORDER_QUERY, ' ', PARAM_ORDER[I][1], ' ', PARAM_ORDER[I][2]);
		END IF;
	END LOOP;
	QUERY_STRING := CONCAT(QUERY_STRING, ORDER_QUERY);
	RETURN QUERY EXECUTE QUERY_STRING;
END;
$$;