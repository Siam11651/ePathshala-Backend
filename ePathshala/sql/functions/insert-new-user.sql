CREATE OR REPLACE FUNCTION INSERT_USER(PARAM_FULL_NAME VARCHAR, PARAM_EMAIL VARCHAR, PARAM_PASSWORD VARCHAR, PARAM_DAY INT, PARAM_MONTH INT, PARAM_YEAR INT, PARAM_USER_TYPE VARCHAR, PARAM_GENDER VARCHAR)
RETURNS INT
LANGUAGE PLPGSQL
AS
$$
DECLARE
	NEW_USER_ID BIGINT;
BEGIN
	IF LENGTH(PARAM_FULL_NAME) = 0 THEN
		RETURN 1; --EMPTY NAME ERROR
	END IF;
	IF LENGTH(PARAM_EMAIL) = 0 THEN
		RETURN 2; --EMPTY EMAIL ERROR
	END IF;
	IF PARAM_EMAIL NOT LIKE '%_@_%.___' THEN
		RETURN 3; --INVALID EMAIL ERROR
	END IF;
	IF LENGTH(PARAM_PASSWORD) < 8 THEN
		RETURN 4; --PASSWORD TOO SHORT ERROR
	END IF;
	IF LENGTH(PARAM_PASSWORD) > 32 THEN
		RETURN 5; --PASSWORD TOO LONG ERROR
	END IF;
	IF NOT IS_VALID_DATE(PARAM_DAY, PARAM_MONTH, PARAM_YEAR) THEN
		RETURN 6; --INVALID DATE ERROR
	END IF;
	SELECT USERS.USER_ID INTO NEW_USER_ID
	FROM USERS
	JOIN STUDENTS
	ON(USERS.USER_ID = STUDENTS.USER_ID)
	WHERE EMAIL = PARAM_EMAIL;
	IF NEW_USER_ID IS NOT NULL THEN
		RETURN 7; --STUDENT ALREADY PRESENT
	END IF;
	SELECT USERS.USER_ID INTO NEW_USER_ID
	FROM USERS
	JOIN TEACHERS
	ON(USERS.USER_ID = TEACHERS.USER_ID)
	WHERE EMAIL = PARAM_EMAIL;
	IF NEW_USER_ID IS NOT NULL THEN
		RETURN 8; --TEACHER ALREADY PRESENT
	END IF;
	NEW_USER_ID = GET_NEW_USER_ID();
	INSERT INTO USERS
	(USER_ID, FULL_NAME, EMAIL, SECURITY_KEY, USER_TYPE, GENDER)
	VALUES(NEW_USER_ID, PARAM_FULL_NAME, PARAM_EMAIL, PARAM_PASSWORD, PARAM_USER_TYPE, PARAM_GENDER);
	RETURN 0; --SUCCESS
END;
$$;