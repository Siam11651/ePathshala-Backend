CREATE OR REPLACE FUNCTION GET_COURSES_TEACHER(PARAM_TEACHER_ID BIGINT)
RETURNS TABLE(COURSE_ID BIGINT, TITLE VARCHAR, DESCRIPTION VARCHAR, DATE_OF_CREATION DATE, PRICE INT, RATE NUMERIC, ENROLL_COUNT BIGINT)
LANGUAGE PLPGSQL
AS
$$
DECLARE
	TEACHER_RATE NUMERIC;
	RATED_COUNT BIGINT;
	ENROLL_COUNT BIGINT;
BEGIN
	SELECT COUNT(*) INTO RATED_COUNT
	FROM CONTENT_VIEWERS
	JOIN CONTENTS
	ON(CONTENT_VIEWERS.CONTENT_ID = CONTENTS.CONTENT_ID)
	JOIN COURSES
	ON(CONTENTS.COURSE_ID = COURSES.COURSE_ID)
	WHERE CREATOR_ID = PARAM_TEACHER_ID AND CONTENT_VIEWERS.RATE IS NOT NULL;
	IF RATED_COUNT > 0 THEN
		SELECT AVG(CONTENT_VIEWERS.RATE) INTO TEACHER_RATE
		FROM CONTENT_VIEWERS
		JOIN CONTENTS
		ON(CONTENT_VIEWERS.CONTENT_ID = CONTENTS.CONTENT_ID)
		JOIN COURSES
		ON(CONTENTS.COURSE_ID = COURSES.COURSE_ID)
		WHERE CREATOR_ID = PARAM_TEACHER_ID AND CONTENT_VIEWERS.RATE IS NOT NULL;
	ELSE
		TEACHER_RATE := 0;
	END IF;
	RETURN QUERY SELECT COUNT(*) INTO ENROLL_COUNT
	FROM ENROLLED_COURSES
	JOIN COURSES
	ON (ENROLLED_COURSES.COURSE_ID = COURSES.COURSE_ID)
	WHERE CREATOR_ID = PARAM_TEACHER_ID;
	RETURN QUERY SELECT COURSES.COURSE_ID, COURSES.TITLE, TRIM(COURSES.DESCRIPTION)::VARCHAR, COURSES.DATE_OF_CREATION, COURSES.PRICE, TEACHER_RATE::NUMERIC(3, 2), ENROLL_COUNT
	FROM COURSES
	JOIN CONTENTS
	ON (COURSES.COURSE_ID = CONTENTS.COURSE_ID)
	JOIN CONTENT_VIEWERS
	ON (CONTENTS.CONTENT_ID = CONTENT_VIEWERS.CONTENT_ID)
	WHERE CREATOR_ID = PARAM_TEACHER_ID
	GROUP BY COURSES.COURSE_ID, COURSES.TITLE, COURSES.DESCRIPTION, COURSES.DATE_OF_CREATION, COURSES.PRICE;
END;
$$;