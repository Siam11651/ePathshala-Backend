CREATE OR REPLACE FUNCTION INSERT_USER(PARAM_FULL_NAME VARCHAR, PARAM_EMAIL VARCHAR, PARAM_PASSWORD VARCHAR, PARAM_DATE_OF_BIRTH VARCHAR, PARAM_STUDENT BOOL)
RETURNS INT
LANGUAGE PLPGSQL
AS
$$
DECLARE
	NEW_USER_ID BIGINT;
	FOUND_USER BIGINT;
BEGIN
	NEW_USER_ID := GET_NEW_USER_ID();
	IF PARAM_STUDENT THEN
		SELECT USERS.USER_ID INTO FOUND_USER
		FROM USERS
		JOIN STUDENTS
		ON(USERS.USER_ID = STUDENTS.USER_ID)
		WHERE EMAIL = PARAM_EMAIL;
		IF FOUND_USER IS NULL THEN
			SELECT USER_ID INTO FOUND_USER
			FROM USERS
			WHERE EMAIL = PARAM_EMAIL;
			IF FOUND_USER IS NULL THEN
				INSERT INTO USERS (USER_ID, FULL_NAME, EMAIL, SECURITY_KEY, DATE_OF_BIRTH, USER_TYPE)
				VALUES (NEW_USER_ID, PARAM_FULL_NAME, PARAM_EMAIL, PARAM_PASSWORD, TO_DATE(PARAM_DATE_OF_BIRTH, 'YYYY-MM-DD'), 'STUDENT');
			ELSE
				INSERT INTO STUDENTS (USER_ID)
				VALUES (FOUND_USER);
			END IF;
		ELSE
			RETURN 1; --USER PRESENT
		END IF;
	ELSE
		SELECT USERS.USER_ID INTO FOUND_USER
		FROM USERS
		JOIN TEACHERS
		ON(USERS.USER_ID = TEACHERS.USER_ID)
		WHERE EMAIL = PARAM_EMAIL;
		IF FOUND_USER IS NULL THEN
			SELECT USER_ID INTO FOUND_USER
			FROM USERS
			WHERE EMAIL = PARAM_EMAIL;
			IF FOUND_USER IS NULL THEN
				INSERT INTO USERS (USER_ID, FULL_NAME, EMAIL, SECURITY_KEY, DATE_OF_BIRTH, USER_TYPE)
				VALUES (NEW_USER_ID, PARAM_FULL_NAME, PARAM_EMAIL, PARAM_PASSWORD, TO_DATE(PARAM_DATE_OF_BIRTH, 'YYYY-MM-DD'), 'TEACHERS');
			ELSE
				INSERT INTO TEACHERS (USER_ID)
				VALUES (FOUND_USER);
			END IF;
		ELSE
			RETURN 1; --USER PRESENT
		END IF;
	END IF;
	RETURN 0; --SUCCESS
END;
$$;